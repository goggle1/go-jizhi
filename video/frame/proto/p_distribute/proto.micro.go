// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto.proto

/*
Package p_distribute is a generated protocol buffer package.

It is generated from these files:
	proto.proto

It has these top-level messages:
	FileDistInfo
	FileDistList
	ActionInfo
	PageInfo
	DistResponse
*/
package p_distribute

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Message service

type MessageService interface {
	AddDistribute(ctx context.Context, in *FileDistList, opts ...client.CallOption) (*DistResponse, error)
	GetDistributes(ctx context.Context, in *PageInfo, opts ...client.CallOption) (*FileDistList, error)
	SetIndex(ctx context.Context, in *FileDistInfo, opts ...client.CallOption) (*DistResponse, error)
	Retry(ctx context.Context, in *ActionInfo, opts ...client.CallOption) (*DistResponse, error)
	Delete(ctx context.Context, in *ActionInfo, opts ...client.CallOption) (*DistResponse, error)
}

type messageService struct {
	c    client.Client
	name string
}

func NewMessageService(name string, c client.Client) MessageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "p_distribute"
	}
	return &messageService{
		c:    c,
		name: name,
	}
}

func (c *messageService) AddDistribute(ctx context.Context, in *FileDistList, opts ...client.CallOption) (*DistResponse, error) {
	req := c.c.NewRequest(c.name, "Message.AddDistribute", in)
	out := new(DistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) GetDistributes(ctx context.Context, in *PageInfo, opts ...client.CallOption) (*FileDistList, error) {
	req := c.c.NewRequest(c.name, "Message.GetDistributes", in)
	out := new(FileDistList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) SetIndex(ctx context.Context, in *FileDistInfo, opts ...client.CallOption) (*DistResponse, error) {
	req := c.c.NewRequest(c.name, "Message.SetIndex", in)
	out := new(DistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) Retry(ctx context.Context, in *ActionInfo, opts ...client.CallOption) (*DistResponse, error) {
	req := c.c.NewRequest(c.name, "Message.Retry", in)
	out := new(DistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) Delete(ctx context.Context, in *ActionInfo, opts ...client.CallOption) (*DistResponse, error) {
	req := c.c.NewRequest(c.name, "Message.Delete", in)
	out := new(DistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageHandler interface {
	AddDistribute(context.Context, *FileDistList, *DistResponse) error
	GetDistributes(context.Context, *PageInfo, *FileDistList) error
	SetIndex(context.Context, *FileDistInfo, *DistResponse) error
	Retry(context.Context, *ActionInfo, *DistResponse) error
	Delete(context.Context, *ActionInfo, *DistResponse) error
}

func RegisterMessageHandler(s server.Server, hdlr MessageHandler, opts ...server.HandlerOption) error {
	type message interface {
		AddDistribute(ctx context.Context, in *FileDistList, out *DistResponse) error
		GetDistributes(ctx context.Context, in *PageInfo, out *FileDistList) error
		SetIndex(ctx context.Context, in *FileDistInfo, out *DistResponse) error
		Retry(ctx context.Context, in *ActionInfo, out *DistResponse) error
		Delete(ctx context.Context, in *ActionInfo, out *DistResponse) error
	}
	type Message struct {
		message
	}
	h := &messageHandler{hdlr}
	return s.Handle(s.NewHandler(&Message{h}, opts...))
}

type messageHandler struct {
	MessageHandler
}

func (h *messageHandler) AddDistribute(ctx context.Context, in *FileDistList, out *DistResponse) error {
	return h.MessageHandler.AddDistribute(ctx, in, out)
}

func (h *messageHandler) GetDistributes(ctx context.Context, in *PageInfo, out *FileDistList) error {
	return h.MessageHandler.GetDistributes(ctx, in, out)
}

func (h *messageHandler) SetIndex(ctx context.Context, in *FileDistInfo, out *DistResponse) error {
	return h.MessageHandler.SetIndex(ctx, in, out)
}

func (h *messageHandler) Retry(ctx context.Context, in *ActionInfo, out *DistResponse) error {
	return h.MessageHandler.Retry(ctx, in, out)
}

func (h *messageHandler) Delete(ctx context.Context, in *ActionInfo, out *DistResponse) error {
	return h.MessageHandler.Delete(ctx, in, out)
}
