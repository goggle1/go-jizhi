// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rpc.proto

/*
Package p_rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
*/
package p_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"
import p_common "git.tvblack.com/video/frame/proto/p_common"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = p_common.ResponseHead{}
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Message service

type MessageService interface {
	OnRequestRpc(ctx context.Context, in *p_common.RequestHead, opts ...client.CallOption) (*p_common.ResponseHead, error)
	OnRequestJson(ctx context.Context, in *p_common.RequestHead, opts ...client.CallOption) (*p_common.RspJsonHead, error)
	OnRequest(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type messageService struct {
	c    client.Client
	name string
}

func NewMessageService(name string, c client.Client) MessageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "p_rpc"
	}
	return &messageService{
		c:    c,
		name: name,
	}
}

func (c *messageService) OnRequestRpc(ctx context.Context, in *p_common.RequestHead, opts ...client.CallOption) (*p_common.ResponseHead, error) {
	req := c.c.NewRequest(c.name, "Message.OnRequestRpc", in)
	out := new(p_common.ResponseHead)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) OnRequestJson(ctx context.Context, in *p_common.RequestHead, opts ...client.CallOption) (*p_common.RspJsonHead, error) {
	req := c.c.NewRequest(c.name, "Message.OnRequestJson", in)
	out := new(p_common.RspJsonHead)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) OnRequest(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Message.OnRequest", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageHandler interface {
	OnRequestRpc(context.Context, *p_common.RequestHead, *p_common.ResponseHead) error
	OnRequestJson(context.Context, *p_common.RequestHead, *p_common.RspJsonHead) error
	OnRequest(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterMessageHandler(s server.Server, hdlr MessageHandler, opts ...server.HandlerOption) error {
	type message interface {
		OnRequestRpc(ctx context.Context, in *p_common.RequestHead, out *p_common.ResponseHead) error
		OnRequestJson(ctx context.Context, in *p_common.RequestHead, out *p_common.RspJsonHead) error
		OnRequest(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type Message struct {
		message
	}
	h := &messageHandler{hdlr}
	return s.Handle(s.NewHandler(&Message{h}, opts...))
}

type messageHandler struct {
	MessageHandler
}

func (h *messageHandler) OnRequestRpc(ctx context.Context, in *p_common.RequestHead, out *p_common.ResponseHead) error {
	return h.MessageHandler.OnRequestRpc(ctx, in, out)
}

func (h *messageHandler) OnRequestJson(ctx context.Context, in *p_common.RequestHead, out *p_common.RspJsonHead) error {
	return h.MessageHandler.OnRequestJson(ctx, in, out)
}

func (h *messageHandler) OnRequest(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.MessageHandler.OnRequest(ctx, in, out)
}

// Client API for Api service

type ApiService interface {
	OnRequest(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	OnRequestRpc(ctx context.Context, in *p_common.RequestHead, opts ...client.CallOption) (*p_common.ResponseHead, error)
}

type apiService struct {
	c    client.Client
	name string
}

func NewApiService(name string, c client.Client) ApiService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "p_rpc"
	}
	return &apiService{
		c:    c,
		name: name,
	}
}

func (c *apiService) OnRequest(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Api.OnRequest", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) OnRequestRpc(ctx context.Context, in *p_common.RequestHead, opts ...client.CallOption) (*p_common.ResponseHead, error) {
	req := c.c.NewRequest(c.name, "Api.OnRequestRpc", in)
	out := new(p_common.ResponseHead)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiHandler interface {
	OnRequest(context.Context, *go_api.Request, *go_api.Response) error
	OnRequestRpc(context.Context, *p_common.RequestHead, *p_common.ResponseHead) error
}

func RegisterApiHandler(s server.Server, hdlr ApiHandler, opts ...server.HandlerOption) error {
	type api interface {
		OnRequest(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		OnRequestRpc(ctx context.Context, in *p_common.RequestHead, out *p_common.ResponseHead) error
	}
	type Api struct {
		api
	}
	h := &apiHandler{hdlr}
	return s.Handle(s.NewHandler(&Api{h}, opts...))
}

type apiHandler struct {
	ApiHandler
}

func (h *apiHandler) OnRequest(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ApiHandler.OnRequest(ctx, in, out)
}

func (h *apiHandler) OnRequestRpc(ctx context.Context, in *p_common.RequestHead, out *p_common.ResponseHead) error {
	return h.ApiHandler.OnRequestRpc(ctx, in, out)
}
